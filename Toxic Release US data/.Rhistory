metal_category,
carcinogen,
unit_of_measure,
x5.1_fugitive_air,
x5.2_stack_air,
x5.3_water,
x5.4_underground,
x5.5.1a_rcra_c_landfill,
x5.5.1b_other_landfills,
x5.5.2_land_treatment,
x5.5.3a_rcra_surface_im,
x5.5.3b_other_surface_i,
x5.5.4_other_disposal,
potw_total_transfers,
onsite_release_total,
offsite_release_total,
offsite_recycled_total,
offsite_energy_recovery_t,
offsite_treated_total,
total_releases,
x8.1a_onsite_contained,
x8.1b_onsite_other,
x8.1c_offsite_contain,
x8.1d_offsite_other_r,
x8.2_energy_recover_on,
x8.3_energy_recover_of,
x8.4_recycling_on_site,
x8.5_recycling_off_sit,
x8.6_treatment_on_site,
x8.7_treatment_off_site,
production_wste_8.18.7,
x8.8_onetime_release,
prod_ratio_or_activity,
x8.9_production_ratio
)
raw_2018 %>%
filter(carcinogen == "YES") %>%
,select(year
raw_2018 %>%
filter(carcinogen == "YES") %>%
select(year
,trifd
,frs_id
,facility_name
,city,
,county,
,zip,
,latitude
,longitude
,industry_sector_code
,primary_sic
,primary_naics
,clean_air_act_chemical
,classification
,metal,
,metal_category
,carcinogen
,unit_of_measure
,x5.1_fugitive_air
,x5.2_stack_air
,x5.3_water
,x5.4_underground
,x5.5.1a_rcra_c_landfill
,x5.5.1b_other_landfills
,x5.5.2_land_treatment
,x5.5.3a_rcra_surface_im
,x5.5.3b_other_surface_i
,x5.5.4_other_disposal
,potw_total_transfers
,onsite_release_total
,offsite_release_total
,offsite_recycled_total
,offsite_energy_recovery_t
,offsite_treated_total
,total_releases
,x8.1a_onsite_contained
,x8.1b_onsite_other
,x8.1c_offsite_contain
,x8.1d_offsite_other_r
,x8.2_energy_recover_on
,x8.3_energy_recover_of
,x8.4_recycling_on_site
,x8.5_recycling_off_sit
,x8.6_treatment_on_site
,x8.7_treatment_off_site
,production_wste_8.18.7
,x8.8_onetime_release
,prod_ratio_or_activity
,x8.9_production_ratio
)
raw_2018_transformed <- usmap_transform(raw_2018
,input_names = c("longtitude", "latitude")
,output names = c("x", "y"))
raw_2018_transformed <- usmap_transform(raw_2018
,input_names = c("longtitude", "latitude")
,output names = c("x", "y"))
raw_2018_transformed <- usmap_transform(raw_2018
,input_names = c("longtitude", "latitude")
,output_names = c("x", "y"))
raw_2018_transformed <- usmap_transform(raw_2018
,input_names = c("longitude", "latitude")
,output_names = c("x", "y"))
raw_2018 %>%
filter(carcinogen == "YES") %>%
select(year,
trifd,
frs_id,
facility_name,
city,
county,
zip,
latitude,
longitude,
industry_sector_code,
primary_sic,
primary_naics,
clean_air_act_chemical,
classification,
metal,,
metal_category,
carcinogen,
unit_of_measure,
x5.1_fugitive_air,
x5.2_stack_air,
x5.3_water,
x5.4_underground,
x5.5.1a_rcra_c_landfill,
x5.5.1b_other_landfills,
x5.5.2_land_treatment,
x5.5.3a_rcra_surface_im,
x5.5.3b_other_surface_i,
x5.5.4_other_disposal,
potw_total_transfers,
onsite_release_total,
offsite_release_total,
offsite_recycled_total,
offsite_energy_recovery_t,
offsite_treated_total,
total_releases,
x8.1a_onsite_contained,
x8.1b_onsite_other,
x8.1c_offsite_contain,
x8.1d_offsite_other_r,
x8.2_energy_recover_on,
x8.3_energy_recover_of,
x8.4_recycling_on_site,
x8.5_recycling_off_sit,
x8.6_treatment_on_site,
x8.7_treatment_off_site,
production_wste_8.18.7,
x8.8_onetime_release,
prod_ratio_or_activity,
x8.9_production_ratio
)
raw_2018_transformed <- usmap_transform(raw_2018
,input_names = c("longitude", "latitude")
,output_names = c("x", "y"))
plot_usmap() +
geompoint(data = raw_2018_transformed,
aes(x = x, y = y, size = mag),
color = "red",
alpha = 0.25
)
plot_usmap() +
geom_point(data = raw_2018_transformed,
aes(x = x, y = y, size = mag),
color = "red",
alpha = 0.25
)
plot_usmap() +
geom_point(data = raw_2018_transformed,
aes(x = x, y = y),
color = "red",
alpha = 0.25
)
plot_usmap(data = raw_2018_transformed,
values = "metal",
color = "red",
alpha = 0.25
)
plot_usmap(data = raw_2018,
values = "metal",
color = "red",
alpha = 0.25
)
raw_2018$county
raw_2018$zip
plot_usmap(data = raw_2018,
values = "metal",
color = "red",
alpha = 0.25
)
install.packages("usmap")
install.packages("maptools")
install.packages("rgdal")
install.packages("tidycensus")
library(tidyverse)
library(readr)
library(stringr)
library(usmap)
library(ggplot2)
library(maptools)
library(rgdal)
library(tidycensus)
raw_2018 <- read_csv("2018_us.csv")
raw_2019 <- read_csv("2019_us.csv")
raw_fipscode <- read.dta("fips_code.dta")
library(haven)
raw_2018 <- read_csv("2018_us.csv")
raw_2019 <- read_csv("2019_us.csv")
raw_fipscode <- read.dta("fips_code.dta")
raw_fipscode <- read_dta("fips_code.dta")
colnames(raw_2018)
## Remove the index in colnames
str_view(colnames(raw_2018), ".\\. ") # The first dot is actually a regex, while the \\. is the real dot
names_df <- as.data.frame(str_split(colnames(raw_2018), ".\\. "),
col.names = NULL) # Split the colnames string with the separator". "
new_colnames <- as.list(names_df[2,])
## Adding x in front of colnames starting with a digit
new_colnames <- ifelse(grepl("^\\d", new_colnames), # logically compare string with matched regex
gsub("^", "x", new_colnames), # add x at the start ^ of the strings
new_colnames) # return the orginal value if grepl returns FALSE
colnames(raw_2018) <- # There are 3 string replacements in here
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(
str_to_lower(new_colnames)
," ", "_")
,"-", "")
,"__", "_")
,"\\(","")
,"\\)","")
colnames(raw_2018)
# Subset data
## Remove unused columns
clean_2018 <- raw_2018 %>%
filter(carcinogen == "YES") %>%
filter(!(st %in% c("AS","GU", "MP", "PR", "VI"))) %>% ## Remove outside-US territories
select(year,
trifd,
frs_id,
facility_name,
city,
county,
st,
zip,
latitude,
longitude,
industry_sector_code,
primary_sic,
primary_naics,
clean_air_act_chemical,
classification,
metal,
metal_category,
carcinogen,
unit_of_measure,
x5.1_fugitive_air,
x5.2_stack_air,
x5.3_water,
x5.4_underground,
x5.5.1a_rcra_c_landfill,
x5.5.1b_other_landfills,
x5.5.2_land_treatment,
x5.5.3a_rcra_surface_im,
x5.5.3b_other_surface_i,
x5.5.4_other_disposal,
potw_total_transfers,
onsite_release_total,
offsite_release_total,
offsite_recycled_total,
offsite_energy_recovery_t,
offsite_treated_total,
total_releases,
x8.1a_onsite_contained,
x8.1b_onsite_other,
x8.1c_offsite_contain,
x8.1d_offsite_other_r,
x8.2_energy_recover_on,
x8.3_energy_recover_of,
x8.4_recycling_on_site,
x8.5_recycling_off_sit,
x8.6_treatment_on_site,
x8.7_treatment_off_site,
production_wste_8.18.7,
x8.8_onetime_release,
prod_ratio_or_activity,
x8.9_production_ratio
)
c2018_transformed <- usmap_transform(clean_2018
,input_names = c("longitude", "latitude")
,output_names = c("x", "y"))
plot_usmap() +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "red",
alpha = 0.25)
# FIPS codes data
fips <- raw_fipscode %>%
mutate(fips = str_c(state_code, county_code)) %>%
select(state, county, fips)
plot_usmap() +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "red",
alpha = 0.25) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = total_releases),
color = "blue",
alpha = 0.25)
plot_usmap() +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "red",
alpha = 0.25) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.3_water),
color = "blue",
alpha = 0.25)
us_components <- get_estimates(geography = "state", product = "components")
head(us_components)
us_components
unique(us_components$NAME)
us_components$NAME
table(us_components$GEOID)
us_components <- get_estimates(geography = "county", product = "population")
head(us_components)
uspop
us_pop <- get_estimates(geography = "county", product = "population")
rm(us_components)
plot_usmap(regions = "county", data = us_pop, values = population)
us_pop
plot_usmap(regions = "county", data = us_pop, values = value)
us_pop <- get_estimates(geography = "county", product = "population")
plot_usmap(regions = "county",
data = us_pop,
values = value)
colnames(us_pop)
plot_usmap(regions = "county",
data = us_pop,
values = "value")
plot_usmap(regions = "county",
data = "us_pop",
values = "value")
colnames(us_pop$GEOID)
colnames(us_pop)
colnames(us_pop) <- c("county", "fips", "variable", "population")
plot_usmap(regions = "county",
data = us_pop,
values = "population")
plot_usmap(regions = "county",
data = us_pop,
values = "population") +
scale_fill_continuous(
low = "white", high = "red", name = "Population (2015)", label = scales::comma)
plot_usmap(regions = "county",
data = us_pop,
values = "population") +
scale_fill_continuous(type = "gradient")
hist(us_pop$population)
table(us_pop$population)
plot_usmap(regions = "county",
data = subset(us_pop, population < 5000000),
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "county",
data = subset(us_pop, population < 1000000),
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "county",
data = subset(us_pop, population < 100000),
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "county",
data = subset(us_pop, population < 500000),
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "county",
data = subset(us_pop, population < 50000),
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "county",
data = subset(us_pop, population < 500000),
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "county",
data = subset(us_pop, population < 100000),
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "county",
data = subset(us_pop, population < 1000000),
values = "population") +
scale_fill_continuous(type = "gradient")
us_pop <- get_estimates(geography = "state", product = "population")
us_pop
colnames(us_pop) <- c("county", "fips", "variable", "population")
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_fill_continuous(type = "gradient")
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_fill_continuous()
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_fill_continuous(low = "#132B43", high = "#56B1F7")
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_fill_continuous(color = "Spectral")
plot_usmap(regions = "state",
data = us_pop,
values = "population",
color = "spectral")
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_fill_brewer(palette = "Spectral")
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_fill_continuous(palette = "Spectral")
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_color_gradient2("population", midpoint = median(us_pop$population))
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_color_gradient1("population", midpoint = median(us_pop$population))
plot_usmap(regions = "state",
data = us_pop,
values = "population"
color = "red") +
plot_usmap(regions = "state",
data = us_pop,
values = "population",
color = "red") +
scale_color_gradient2("population", midpoint = median(us_pop$population))
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_color_gradient2("population", midpoint = median(us_pop$population))
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_color_gradient2("population", midpoint = median(us_pop$population)) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "red",
alpha = 0.25)
plot_usmap(regions = "state",
data = us_pop,
values = "population") +
scale_color_gradient2("population", midpoint = median(us_pop$population)) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "yellow",
alpha = 0.25)
plot_usmap(regions = "state",
data = us_pop,
values = "population"
color = "darkred") +
plot_usmap(regions = "state",
data = us_pop,
values = "population",
color = "darkred") +
scale_color_gradient2("population", midpoint = median(us_pop$population)) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "yellow",
alpha = 0.25)
plot_usmap(regions = "state",
data = us_pop,
values = "population",
color = "darkred") +
scale_color_gradient2(low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = median(us_pop$population)) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "yellow",
alpha = 0.25)
plot_usmap(regions = "state",
data = us_pop,
values = "population",
color = "darkred") +
scale_color_gradient2(low = "red",
mid = "white",
high = "blue",
midpoint = median(us_pop$population)) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "yellow",
alpha = 0.25)
plot_usmap(regions = "state",
data = us_pop,
values = "population",
color = "white") +
scale_color_gradient2(low = "red",
mid = "white",
high = "blue",
midpoint = median(us_pop$population)) +
geom_point(data = c2018_transformed,
aes(x = x, y = y, size = x5.2_stack_air),
color = "yellow",
alpha = 0.25)
